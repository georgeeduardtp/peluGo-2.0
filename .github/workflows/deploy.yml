name: Deploy PeluGo with Secure Firebase Config

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Set GITHUB_TOKEN permissions to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build and deploy job
  build-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Pages
      uses: actions/configure-pages@v3
    
    - name: Create Firebase Production Config
      run: |
        echo "üîê Creating secure Firebase configuration..."
        
        # Create production config file with secrets
        cat > firebase-production-config.js << 'EOL'
        // Firebase Production Configuration - Injected by GitHub Actions
        (function() {
          'use strict';
          
          // Set Firebase configuration from GitHub Secrets
          window.FIREBASE_API_KEY = '${{ secrets.FIREBASE_API_KEY || 'MISSING_API_KEY' }}';
          window.FIREBASE_AUTH_DOMAIN = '${{ secrets.FIREBASE_AUTH_DOMAIN || 'pelugo-2025.firebaseapp.com' }}';
          window.FIREBASE_PROJECT_ID = '${{ secrets.FIREBASE_PROJECT_ID || 'pelugo-2025' }}';
          window.FIREBASE_STORAGE_BUCKET = '${{ secrets.FIREBASE_STORAGE_BUCKET || 'pelugo-2025.firebasestorage.app' }}';
          window.FIREBASE_MESSAGING_SENDER_ID = '${{ secrets.FIREBASE_MESSAGING_SENDER_ID || '588352402376' }}';
          window.FIREBASE_APP_ID = '${{ secrets.FIREBASE_APP_ID || '1:588352402376:web:c8a0d71f296a80464346fd' }}';
          window.FIREBASE_MEASUREMENT_ID = '${{ secrets.FIREBASE_MEASUREMENT_ID || 'G-4J0EQTQTVS' }}';
          
          console.log('üîê Firebase production config loaded');
          window.FIREBASE_PRODUCTION_CONFIG = true;
        })();
        EOL
        
        echo "üìù Injecting config into HTML files..."
        
        # Inject configuration script into HTML files
        for file in *.html; do
          if [ -f "$file" ]; then
            echo "Processing: $file"
            # Add production config script after env-config.js
            if grep -q "env-config.js" "$file"; then
              sed -i '/env-config\.js/a\    <script src="firebase-production-config.js"></script>' "$file"
            else
              # If no env-config.js found, add in head section
              sed -i '/<head>/a\    <script src="firebase-production-config.js"></script>' "$file"
            fi
          fi
        done
        
        echo "‚úÖ Configuration injected successfully"
        
    - name: Verify Configuration Injection
      run: |
        echo "üîç Verificando que la configuraci√≥n fue inyectada..."
        if grep -q "firebase-production-config.js" *.html; then
          echo "‚úÖ Configuraci√≥n encontrada en archivos HTML"
        else
          echo "‚ùå Error: Configuraci√≥n no encontrada"
          exit 1
        fi
        
        if [ -f "firebase-production-config.js" ]; then
          echo "‚úÖ Archivo de configuraci√≥n creado correctamente"
          echo "üìÑ Tama√±o: $(wc -c < firebase-production-config.js) bytes"
        else
          echo "‚ùå Error: Archivo de configuraci√≥n no encontrado"
          exit 1
        fi
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: '.'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2